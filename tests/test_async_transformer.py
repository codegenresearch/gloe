import asyncio\nimport unittest\nfrom typing import TypeVar, Any\nfrom gloe import (\n    async_transformer,\n    ensure,\n    UnsupportedTransformerArgException,\n    transformer,\n)\nfrom gloe.functional import partial_async_transformer\nfrom gloe.utils import forward\n\n_In = TypeVar("_In")\n\n_DATA = {"foo": "bar"}\n\n@async_transformer\nasync def request_data(url: str) -> dict[str, str]:\n    await asyncio.sleep(0.1)\n    return _DATA\n\nclass HasNotBarKey(Exception):\n    pass\n\nclass HasNotFooKey(Exception):\n    pass\n\nclass HasFooKey(Exception):\n    pass\n\nclass IsNotStr(Exception):\n    pass\n\nclass IsNotInt(Exception):\n    pass\n\ndef has_bar_key(data: dict[str, str]) -> None:\n    if "bar" not in data.keys():\n        raise HasNotBarKey()\n\ndef has_foo_key(data: dict[str, str]) -> None:\n    if "foo" not in data.keys():\n        raise HasNotFooKey()\n\ndef foo_key_removed(data: dict[str, str]) -> None:\n    if "foo" in data.keys():\n        raise HasFooKey()\n\ndef is_str(data: Any) -> None:\n    if type(data) is not str:\n        raise IsNotStr()\n\ndef is_int(data: Any) -> None:\n    if type(data) is not int:\n        raise IsNotInt()\n\n_URL = "http://my-service"\n\nclass TestAsyncTransformer(unittest.IsolatedAsyncioTestCase):\n    async def test_basic_case(self):\n        test_forward = request_data >> forward()\n        result = await test_forward(_URL)\n        self.assertDictEqual(result, _DATA)\n\n    async def test_begin_with_transformer(self):\n        test_forward = forward[str]() >> request_data\n        result = await test_forward(_URL)\n        self.assertDictEqual(result, _DATA)\n\n    async def test_async_on_divergent_connection(self):\n        test_forward = forward[str]() >> (forward[str](), request_data)\n        result = await test_forward(_URL)\n        self.assertEqual(result, (_URL, _DATA))\n\n    async def test_divergent_connection_from_async(self):\n        test_forward = request_data >> (\n            forward[dict[str, str]](),\n            forward[dict[str, str]](),\n        )\n        result = await test_forward(_URL)\n        self.assertEqual(result, (_DATA, _DATA))\n\n    async def test_partial_async_transformer(self):\n        @partial_async_transformer\n        async def sleep_and_forward(data: dict[str, str], delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return data\n\n        pipeline = sleep_and_forward(0.1) >> forward()\n        result = await pipeline(_DATA)\n        self.assertDictEqual(result, _DATA)\n\n    async def test_ensure_async_transformer(self):\n        @ensure(incoming=[is_str], outcome=[has_bar_key])\n        @ensure(incoming=[is_str], outcome=[has_foo_key])\n        @async_transformer\n        async def ensured_request(url: str) -> dict[str, str]:\n            await asyncio.sleep(0.1)\n            return _DATA\n\n        pipeline = ensured_request >> forward()\n        with self.assertRaises(HasNotBarKey):\n            await pipeline(_URL)\n        with self.assertRaises(HasNotFooKey):\n            await pipeline(_URL)\n\n    async def test_ensure_partial_async_transformer(self):\n        @ensure(incoming=[is_str], outcome=[has_bar_key])\n        @ensure(incoming=[is_str], outcome=[has_foo_key])\n        @partial_async_transformer\n        async def ensured_delayed_request(url: str, delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return _DATA\n\n        pipeline = ensured_delayed_request(0.1) >> forward()\n        with self.assertRaises(HasNotBarKey):\n            await pipeline(_URL)\n        with self.assertRaises(HasNotFooKey):\n            await pipeline(_URL)\n\n    async def test_async_transformer_wrong_arg(self):\n        def next_transformer():\n            pass\n\n        @ensure(incoming=[is_str], outcome=[has_bar_key])\n        @partial_async_transformer\n        async def ensured_delayed_request(url: str, delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return _DATA\n\n        with self.assertRaises(UnsupportedTransformerArgException):\n            pipeline = ensured_delayed_request(0.1) >> next_transformer\n\n    async def test_async_transformer_copy(self):\n        @transformer\n        def add_slash(path: str) -> str:\n            return path + "/"\n\n        @partial_async_transformer\n        async def ensured_delayed_request(url: str, delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return _DATA\n\n        pipeline = add_slash >> ensured_delayed_request(0)\n        pipeline = pipeline.copy()\n        result = await pipeline(_URL)\n        self.assertDictEqual(result, _DATA)\n\n    async def test_ensure_with_int(self):\n        @ensure(incoming=[is_int], outcome=[is_int])\n        @async_transformer\n        async def int_transformer(num: int) -> int:\n            await asyncio.sleep(0.1)\n            return num + 1\n\n        pipeline = int_transformer >> forward()\n        with self.assertRaises(IsNotInt):\n            await pipeline(_URL)\n\n    async def test_ensure_with_removed_foo_key(self):\n        @ensure(outcome=[foo_key_removed])\n        @async_transformer\n        async def remove_foo_key(data: dict[str, str]) -> dict[str, str]:\n            await asyncio.sleep(0.1)\n            if "foo" in data.keys():\n                del data["foo"]\n            return data\n\n        pipeline = remove_foo_key >> forward()\n        result = await pipeline(_DATA)\n        self.assertDictEqual(result, {})\n        with self.assertRaises(HasFooKey):\n            await pipeline({"foo": "bar"})\n