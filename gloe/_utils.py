from functools import wraps, partial\nfrom types import GenericAlias, _GenericAlias, FunctionType\nfrom typing import (\n    TypeVar,\n    get_origin,\n    TypeAlias,\n    TypedDict,\n    Generic,\n    Union,\n    ParamSpec,\n    Callable,\n    Awaitable,\n    cast,\n)\nfrom inspect import signature, Signature\nfrom collections.abc import Sequence\nfrom typing_extensions import assert_type\n\n\nclass TypeMismatchError(Exception):\n    """Exception raised when types do not match."""\n    def __init__(self, generic, specific):\n        self.generic = generic\n        self.specific = specific\n        super().__init__(f"Type {generic} does not match with {specific}")\n\nclass MissingArgumentsError(Exception):\