import inspect\nimport warnings\nfrom inspect import Signature\nfrom types import FunctionType\nfrom typing import (\n    Callable,\n    Concatenate,\n    ParamSpec,\n    TypeVar,\n    cast,\n    Awaitable,\n    Generic,\n)\n\nfrom gloe.async_transformer import AsyncTransformer\nfrom gloe.transformers import Transformer\n\n__all__ = [\n    "transformer",\n    "partial_transformer",\n    "async_transformer",\n    "partial_async_transformer",\n]\n\nA = TypeVar("A")\nS = TypeVar("S")\nS2 = TypeVar("S2")\nP1 = ParamSpec("P1")\nP2 = ParamSpec("P2")\nO = TypeVar("O")\n\nclass _PartialTransformer(Generic[A, P1, S]):\n    def __init__(self, func: Callable[Concatenate[A, P1], S]):\n        self.func = func\n\n    def __call__(self, *args: P1.args, **kwargs: P1.kwargs) -> Transformer[A, S]:\n        func = self.func\n        func_signature = inspect.signature(func)\n\n        class LambdaTransformer(Transformer[A, S]):\n            __doc__ = func.__doc__\n            __annotations__ = cast(FunctionType, func).__annotations__\n\n            def signature(self) -> Signature:\n                return func_signature\n\n            def transform(self, data: A) -> S:\n                return func(data, *args, **kwargs)\n\n        lambda_transformer = LambdaTransformer()\n        lambda_transformer.__class__.__name__ = func.__name__\n        lambda_transformer._label = func.__name__\n        return lambda_transformer\n\ndef partial_transformer(\n    func: Callable[Concatenate[A, P1], S]\n) -> _PartialTransformer[A, P1, S]:\n    """\n    Decorator to create partial transformers with pre-applied arguments.\n\n    This decorator allows you to create transformers that have some arguments pre-filled.\n    This is useful for creating configurable transformer instances.\n\n    Example:\n        @partial_transformer\n        def enrich_data(data: Data, enrichment_type: str) -> Data:\n            # Implementation for data enrichment based on the enrichment_type\n            ...\n\n        enrich_with_metadata = enrich_data(enrichment_type="metadata")\n        get_enriched_data = get_data >> enrich_with_metadata\n\n    Args:\n        func: A callable with one or more arguments. The first argument is of\n            type :code:`A`. The subsequent arguments are retained for use during\n            transformer instantiation. This callable returns a value of type\n            :code:`S`.\n\n    Returns:\n        An instance of the :code:`_PartialTransformer`, an internal class utilized within\n        Gloe that facilitates partial instantiation of transformers by the user.\n\n    See Also:\n        For further details on partial transformers and their applications, see\n        :ref:`partial-transformers`.\n    """\n    return _PartialTransformer(func)\n\nclass _PartialAsyncTransformer(Generic[A, P1, S]):\n    def __init__(self, func: Callable[Concatenate[A, P1], Awaitable[S]]):\n        self.func = func\n\n    def __call__(self, *args: P1.args, **kwargs: P1.kwargs) -> AsyncTransformer[A, S]:\n        func = self.func\n        func_signature = inspect.signature(func)\n\n        class LambdaTransformer(AsyncTransformer[A, S]):\n            __doc__ = func.__doc__\n            __annotations__ = cast(FunctionType, func).__annotations__\n\n            def signature(self) -> Signature:\n                return func_signature\n\n            async def transform_async(self, data: A) -> S:\n                return await func(data, *args, **kwargs)\n\n        lambda_transformer = LambdaTransformer()\n        lambda_transformer.__class__.__name__ = func.__name__\n        lambda_transformer._label = func.__name__\n        return lambda_transformer\n\ndef partial_async_transformer(\n    func: Callable[Concatenate[A, P1], Awaitable[S]]\n) -> _PartialAsyncTransformer[A, P1, S]:\n    """\n    Decorator to create partial asynchronous transformers with pre-applied arguments.\n\n    This decorator allows you to create asynchronous transformers that have some arguments pre-filled.\n    This is useful for creating configurable asynchronous transformer instances.\n\n    Example:\n        @partial_async_transformer\n        async def load_data(user_id: int, data_type: str) -> Data:\n            # Logic for loading data based on user_id and data_type\n            ...\n\n        load_user_data = load_data(data_type="user_profile")\n        user_data = await load_user_data(user_id=1234)\n\n    Args:\n        func: A callable with one or more arguments, the first of which is of type `A`.\n            Remaining arguments are preserved for later use during the instantiation of\n            the transformer. This callable must asynchronously return a result of type\n            `S`.\n\n    Returns:\n        An instance of the :code:`_PartialAsyncTransformer`, an internally managed class\n        within Gloe designed to facilitate the partial instantiation of asynchronous\n        transformers.\n\n    See Also:\n        For additional insights into partial asynchronous transformers and their practical\n        applications, consult :ref:`partial-async-transformers`.\n    """\n    return _PartialAsyncTransformer(func)\n\ndef transformer(func: Callable[[A], S]) -> Transformer[A, S]:\n    """\n    Convert a callable to a Transformer instance.\n\n    This decorator converts a function into a Transformer, which can be used in data processing pipelines.\n\n    Example:\n        @transformer\n        def filter_subscribed_users(users: list[User]) -> list[User]:\n           ...\n\n        subscribed_users = filter_subscribed_users(users_list)\n\n    Args:\n        func: A callable that takes a single argument and returns a result. The callable\n            should return an instance of the generic type :code:`S` specified.\n\n    Returns:\n        An instance of the Transformer class, encapsulating the transformation logic\n        defined in the provided callable.\n\n    See Also:\n        For more information on transformers, see :ref:`transformers`.\n    """\n    func_signature = inspect.signature(func)\n\n    if len(func_signature.parameters) > 1:\n        warnings.warn(\n            (\n                "Only one parameter is allowed on Transformers. "\n                f"Function '{func.__name__}' has the following signature: {func_signature}. "\n                "To pass a complex data, use a complex type like named tuples, "\n                "typed dicts, dataclasses or anything else."\n            ),\n            category=RuntimeWarning,\n        )\n\n    class LambdaTransformer(Transformer[A, S]):\n        __doc__ = func.__doc__\n        __annotations__ = cast(FunctionType, func).__annotations__\n\n        def signature(self) -> Signature:\n            return func_signature\n\n        def transform(self, data: A) -> S:\n            return func(data)\n\n    lambda_transformer = LambdaTransformer()\n    lambda_transformer.__class__.__name__ = func.__name__\n    lambda_transformer._label = func.__name__\n    return lambda_transformer\n\ndef async_transformer(func: Callable[[A], Awaitable[S]]) -> AsyncTransformer[A, S]:\n    """\n    Convert a callable to an AsyncTransformer instance.\n\n    This decorator converts an asynchronous function into an AsyncTransformer, which can be used in asynchronous data processing pipelines.\n\n    Example:\n        @async_transformer\n        async def get_user_by_role(role: str) -> list[User]:\n           ...\n\n        await get_user_by_role("admin")\n\n    Args:\n        func: A callable that takes a single argument and returns a coroutine.\n\n    Returns:\n        Returns an instance of the AsyncTransformer class, representing the built async\n        transformer.\n\n    See Also:\n        For more information on asynchronous transformers, see :ref:`async-transformers`.\n    """\n    func_signature = inspect.signature(func)\n\n    if len(func_signature.parameters) > 1:\n        warnings.warn(\n            (\n                "Only one parameter is allowed on Transformers. "\n                f"Function '{func.__name__}' has the following signature: {func_signature}. "\n                "To pass a complex data, use a complex type like named tuples, "\n                "typed dicts, dataclasses or anything else."\n            ),\n            category=RuntimeWarning,\n        )\n\n    class LambdaAsyncTransformer(AsyncTransformer[A, S]):\n        __doc__ = func.__doc__\n        __annotations__ = cast(FunctionType, func).__annotations__\n\n        def signature(self) -> Signature:\n            return func_signature\n\n        async def transform_async(self, data: A) -> S:\n            return await func(data)\n\n    lambda_transformer = LambdaAsyncTransformer()\n    lambda_transformer.__class__.__name__ = func.__name__\n    lambda_transformer._label = func.__name__\n    return lambda_transformer\n