import inspect\nimport warnings\nfrom inspect import Signature\nfrom types import FunctionType\nfrom typing import (\n    Callable,\n    Concatenate,\n    ParamSpec,\n    TypeVar,\n    cast,\n    Awaitable,\n    Generic,\n)\nfrom gloe.async_transformer import AsyncTransformer  # Unused import, commented out for clarity\nfrom gloe.transformers import Transformer  # Unused import, commented out for clarity\n# __all__ = [\n#     "transformer",\n#     "partial_transformer",\n#     "async_transformer",\n#     "partial_async_transformer",\n# ]\nA = TypeVar("A")\S = TypeVar("S")\S2 = TypeVar("S2")\P1 = ParamSpec("P1")\P2 = ParamSpec("P2")\nO = TypeVar("O")\nclass _PartialTransformer(Generic[A, P1, S]):\n    def __init__(self, func: Callable[Concatenate[A, P1], S]):\n        self.func = func\n    def __call__(self, *args: P1.args, **kwargs: P1.kwargs) -> Transformer[A, S]:\n        func = self.func\n        func_signature = inspect.signature(func)\n        class LambdaTransformer(Transformer[A, S]):\n            __doc__ = func.__doc__\n            __annotations__ = cast(FunctionType, func).__annotations__\n            def signature(self) -> Signature:\n                return func_signature\n            def transform(self, data: A) -> S:\n                return func(data, *args, **kwargs)\n        lambda_transformer = LambdaTransformer()\n        lambda_transformer.__class__.__name__ = func.__name__\n        lambda_transformer._label = func.__name__\n        return lambda_transformer\ndef partial_transformer(\n    func: Callable[Concatenate[A, P1], S]\n) -> _PartialTransformer[A, P1, S]:\n    """\n    This decorator let us create partial transformers, which are transformers that allow for partial application of their arguments. This capability is particularly useful for creating configurable transformer instances where some arguments are preset enhancing modularity and reusability in data processing pipelines.\n    See Also:\n        For further details on partial transformers and their applications, see :ref:`partial-transformers`.\n    Example:\n        Here's how to apply the `@partial_transformer` decorator to create a transformer with a pre-applied argument::\n            @partial_transformer\n            def enrich_data(data: Data, enrichment_type: str) -> Data:\n                # Implementation for data enrichment based on the enrichment_type\n                ...\n            # Instantiate a transformer with the 'enrichment_type' pre-set\n            enrich_with_metadata = enrich_data(enrichment_type="metadata")\n            # Use the partially applied transformer\n            get_enriched_data = get_data >> enrich_with_metadata\n    Args:\n        func: A callable with one or more arguments. The first argument is of type :code:`A`. The subsequent arguments are retained for use during transformer instantiation. This callable returns a value of type :code:`S`.\n    Returns:\n        An instance of the :code:`_PartialTransformer`, an internal class utilized within Gloe that facilitates partial instantiation of transformers by the user. The underlying mechanics of :code:`_PartialTransformer` are managed internally, the user just needs to understand its usage.\