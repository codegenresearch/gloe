import traceback from abc import ABC, abstractmethod from inspect import Signature from typing import TypeVar, overload, cast, Any, TypeAlias, Union from gloe.base_transformer import BaseTransformer, TransformerException from gloe.async_transformer import AsyncTransformer __all__ = ["Transformer"] I = TypeVar("I") O = TypeVar("O") O1 = TypeVar("O1") O2 = TypeVar("O2") O3 = TypeVar("O3") O4 = TypeVar("O4") O5 = TypeVar("O5") O6 = TypeVar("O6") O7 = TypeVar("O7") Tr: TypeAlias = "Transformer" AT: TypeAlias = AsyncTransformer BT: TypeAlias = BaseTransformer[I, O, Any] AsyncNext = Union[ AT[O, O1], BT[O, O1], tuple[Union[AT[O, O1], BT[O, O1]], Union[AT[O, O2], BT[O, O2]]], tuple[Union[AT[O, O1], BT[O, O1]], Union[AT[O, O2], BT[O, O2]], Union[AT[O, O3], BT[O, O3]]], tuple[Union[AT[O, O1], BT[O, O1]], Union[AT[O, O2], BT[O, O2]], Union[AT[O, O3], BT[O, O3]], Union[AT[O, O4], BT[O, O4]]], tuple[Union[AT[O, O1], BT[O, O1]], Union[AT[O, O2], BT[O, O2]], Union[AT[O, O3], BT[O, O3]], Union[AT[O, O4], BT[O, O4]], Union[AT[O, O5], BT[O, O5]]], tuple[Union[AT[O, O1], BT[O, O1]], Union[AT[O, O2], BT[O, O2]], Union[AT[O, O3], BT[O, O3]], Union[AT[O, O4], BT[O, O4]], Union[AT[O, O5], BT[O, O5]], Union[AT[O, O6], BT[O, O6]]], tuple[Union[AT[O, O1], BT[O, O1]], Union[AT[O, O2], BT[O, O2]], Union[AT[O, O3], BT[O, O3]], Union[AT[O, O4], BT[O, O4]], Union[AT[O, O5], BT[O, O5]], Union[AT[O, O6], BT[O, O6]], Union[AT[O, O7], BT[O, O7]]], ] class Transformer(BaseTransformer[I, O, "Transformer"], ABC): \