import copy\nimport uuid\nfrom typing import Generic, TypeVar, Union, cast, Callable, Any, Type, TypeAlias, Iterable, get_args, get_origin\nfrom inspect import Signature, signature as inspect_signature\nfrom uuid import UUID\nimport networkx as nx\nfrom networkx import DiGraph, Graph\nfrom functools import cached_property\nfrom itertools import groupby\nfrom gloe._utils import _format_return_annotation\n",__all__ = ["BaseTransformer", "TransformerException", "PreviousTransformer"]\n\n_In = TypeVar("_In")\n_Out = TypeVar("_Out")\n_NextOut = TypeVar("_NextOut")\n_Out2 = TypeVar("_Out2")\n_Out3 = TypeVar("_Out3")\n_Out4 = TypeVar("_Out4")\n_Out5 = TypeVar("_Out5")\n_Out6 = TypeVar("_Out6")\n_Out7 = TypeVar("_Out7")\n_Self = TypeVar("_Self", bound="BaseTransformer")\n\nPreviousTransformer: TypeAlias = Union[\n    None,\n    _Self,\n    tuple[_Self, _Self],\n    tuple[_Self, _Self, _Self],\n    tuple[_Self, _Self, _Self, _Self],\n    tuple[_Self, _Self, _Self, _Self, _Self],\n    tuple[_Self, _Self, _Self, _Self, _Self, _Self],\n    tuple[_Self, _Self, _Self, _Self, _Self, _Self, _Self],"]\n\nclass TransformerException(Exception):\n    def __init__(self, internal_exception: Exception, raiser_transformer: "BaseTransformer", message: str = None):\n        self._internal_exception = internal_exception.with_traceback(internal_exception.__traceback__)\n        self.raiser_transformer = raiser_transformer\n        super().__init__(message)\n    \\