import copy\nimport uuid\nfrom typing import Generic, TypeVar, Union, cast, Callable, Any, Type, TypeAlias\nfrom inspect import Signature, signature as inspect_signature\nfrom uuid import UUID\nimport networkx as nx\nfrom networkx import DiGraph\nfrom gloe._utils import _format_return_annotation\n",__all__ = ["BaseTransformer", "TransformerException", "PreviousTransformer"]\n\n_In = TypeVar("_In")\n_Out = TypeVar("_Out")\n_Self = TypeVar("_Self", bound="BaseTransformer")\nPreviousTransformer: TypeAlias = Union[None, _Self, tuple[_Self, ...]]\n\nclass TransformerException(Exception):\n    def __init__(self, internal_exception: Exception, raiser_transformer: "BaseTransformer", message: str = None):\n        self._internal_exception = internal_exception.with_traceback(internal_exception.__traceback__)\n        self.raiser_transformer = raiser_transformer\n        super().__init__(message)\n    @property\n    def internal_exception(self):\n        return self._internal_exception\n\nclass BaseTransformer(Generic[_In, _Out, _Self]):\n    def __init__(self):\n        self._previous: PreviousTransformer = None\n        self._children: list[_Self] = []\n        self._invisible = False\n        self.id = uuid.uuid4()\n        self.instance_id = uuid.uuid4()\n        self._label = self.__class__.__name__\n        self._graph_node_props = {"shape": "box"}\n        self.events = []\n    \\