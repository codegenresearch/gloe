import asyncio\nfrom inspect import Signature\nfrom types import GenericAlias, MethodType\nfrom typing import TypeVar, Any, cast, Tuple, Union, List\nfrom gloe.async_transformer import AsyncTransformer\nfrom gloe.base_transformer import BaseTransformer, PreviousTransformer\nfrom gloe.transformers import Transformer\nfrom gloe._utils import _match_types, _specify_types\nfrom gloe.exceptions import UnsupportedTransformerArgException\n\n_In = TypeVar("_In")\n_Out = TypeVar("_Out")\n_NextOut = TypeVar("_NextOut")\n\ndef is_transformer(node):\n    if isinstance(node, (list, tuple)):\n        return all(is_transformer(n) for n in node)\n    return isinstance(node, Transformer)\n\ndef is_async_transformer(node):\n    return isinstance(node, AsyncTransformer)\n\ndef has_any_async_transformer(nodes):\n    return any(is_async_transformer(node) for node in nodes)\n\ndef _resolve_new_merge_transformers(\n    new_transformer,\n    transformer,\n):\n    new_transformer.__class__.__name__ = transformer.__class__.__name__\n    new_transformer._label = transformer.label\n    new_transformer._children = transformer.children\n    new_transformer._invisible = transformer.invisible\n    new_transformer._graph_node_props = transformer.graph_node_props\n    new_transformer._set_previous(transformer.previous)\n    return new_transformer\n\ndef _resolve_serial_connection_signatures(\n    transformer,\n    generic_vars,\n    signature,\n):\n    first_param = list(signature.parameters.values())[0]\n    new_parameter = first_param.replace(\n        annotation=_specify_types(transformer.input_type, generic_vars)\n    )\n    new_signature = signature.replace(\n        parameters=[new_parameter],\n        return_annotation=_specify_types(signature.return_annotation, generic_vars),\n    )\n    return new_signature\n\ndef _merge_serial(\n    transformer1,\n    _transformer2,\n):\n    if transformer1.previous is None:\n        transformer1 = transformer1.copy(regenerate_instance_id=True)\n    _transformer2 = _transformer2.copy(regenerate_instance_id=True)\n    _transformer2._set_previous(transformer1)\n    signature1 = transformer1.signature()\n    signature2 = _transformer2.signature()\n    input_generic_vars = _match_types(_transformer2.input_type, signature1.return_annotation)\n    output_generic_vars = _match_types(signature1.return_annotation, _transformer2.input_type)\n    generic_vars = {**input_generic_vars, **output_generic_vars}\n    def transformer1_signature(_):\n        return signature1.replace(\n            return_annotation=_specify_types(signature1.return_annotation, generic_vars),\n        )\n    setattr(transformer1, "signature", MethodType(transformer1_signature, transformer1))\n    class BaseNewTransformer:\n        def signature(self):\n            return _resolve_serial_connection_signatures(_transformer2, generic_vars, signature2)\n        def __len__(self):\n            return len(transformer1) + len(_transformer2)\n    new_transformer = None\n    if is_transformer(transformer1) and is_transformer(_transformer2):\n        class NewTransformer1(BaseNewTransformer, Transformer[_In, _NextOut]):\n            def transform(self, data):\n                transformed = _transformer2(transformer1(data))\n                return transformed\n        new_transformer = NewTransformer1()\n    elif is_async_transformer(transformer1) and is_transformer(_transformer2):\n        class NewTransformer2(BaseNewTransformer, AsyncTransformer[_In, _NextOut]):\n            async def transform_async(self, data):\n                transformer1_out = await transformer1(data)\n                transformed = _transformer2(transformer1_out)\n                return transformed\n        new_transformer = NewTransformer2()\n    elif is_async_transformer(transformer1) and is_async_transformer(_transformer2):\n        class NewTransformer3(BaseNewTransformer, AsyncTransformer[_In, _NextOut]):\n            async def transform_async(self, data):\n                transformer1_out = await transformer1(data)\n                transformed = await _transformer2(transformer1_out)\n                return transformed\n        new_transformer = NewTransformer3()\n    elif is_transformer(transformer1) and is_async_transformer(_transformer2):\n        class NewTransformer4(AsyncTransformer[_In, _NextOut]):\n            async def transform_async(self, data):\n                transformer1_out = transformer1(data)\n                transformed = await _transformer2(transformer1_out)\n                return transformed\n        new_transformer = NewTransformer4()\n    else:\n        raise UnsupportedTransformerArgException(_transformer2)\n    return _resolve_new_merge_transformers(new_transformer, _transformer2)\n\ndef _merge_diverging(\n    incident_transformer,\n    *receiving_transformers,\n):\n    if incident_transformer.previous is None:\n        incident_transformer = incident_transformer.copy(regenerate_instance_id=True)\n    receiving_transformers = tuple(\n        receiving_transformer.copy(regenerate_instance_id=True)\n        for receiving_transformer in receiving_transformers\n    )\n    for receiving_transformer in receiving_transformers:\n        receiving_transformer._set_previous(incident_transformer)\n    incident_signature = incident_transformer.signature()\n    receiving_signatures = []\n    for receiving_transformer in receiving_transformers:\n        generic_vars = _match_types(receiving_transformer.input_type, incident_signature.return_annotation)\n        receiving_signature = receiving_transformer.signature()\n        return_annotation = receiving_signature.return_annotation\n        new_return_annotation = _specify_types(return_annotation, generic_vars)\n        new_signature = receiving_signature.replace(return_annotation=new_return_annotation)\n        receiving_signatures.append(new_signature)\n        def _signature(_):\n            return new_signature\n        if receiving_transformer._previous == incident_transformer:\n            setattr(receiving_transformer, "signature", MethodType(_signature, receiving_transformer))\n    class BaseNewTransformer:\n        def signature(self):\n            receiving_signature_returns = [r.return_annotation for r in receiving_signatures]\n            new_signature = incident_signature.replace(\n                return_annotation=GenericAlias(Tuple, Tuple(*receiving_signature_returns)),\n            )\n            return new_signature\n        def __len__(self):\n            lengths = [len(t) for t in receiving_transformers]\n            return sum(lengths) + len(incident_transformer)\n    new_transformer = None\n    if is_transformer(incident_transformer) and all(is_transformer(rt) for rt in receiving_transformers):\n        def split_result(data):\n            intermediate_result = incident_transformer(data)\n            outputs = [rt(intermediate_result) for rt in receiving_transformers]\n            return tuple(outputs)\n        class NewTransformer1(BaseNewTransformer, Transformer[_In, Tuple[Any, ...]]):\n            def transform(self, data):\n                return split_result(data)\n        new_transformer = NewTransformer1()\n    else:\n        async def split_result_async(data):\n            if asyncio.iscoroutinefunction(incident_transformer.__call__):\n                intermediate_result = await incident_transformer(data)\n            else:\n                intermediate_result = incident_transformer(data)\n            outputs = []\n            for rt in receiving_transformers:\n                if asyncio.iscoroutinefunction(rt.__call__):\n                    output = await rt(intermediate_result)\n                else:\n                    output = rt(intermediate_result)\n                outputs.append(output)\n            return tuple(outputs)\n        class NewTransformer2(BaseNewTransformer, AsyncTransformer[_In, Tuple[Any, ...]]):\n            async def transform_async(self, data):\n                return await split_result_async(data)\n        new_transformer = NewTransformer2()\n    new_transformer._previous = cast(PreviousTransformer, receiving_transformers)\n    new_transformer.__class__.__name__ = "Converge"\n    new_transformer._label = ""\n    new_transformer._graph_node_props = {\n        "shape": "diamond",\n        "width": 0.5,\n        "height": 0.5,\n    }\n    return new_transformer\n\ndef _compose_nodes(\n    current,\n    next_node,\n):\n    if isinstance(current, BaseTransformer):\n        if isinstance(next_node, BaseTransformer):\n            return _merge_serial(current, next_node)\n        elif isinstance(next_node, tuple):\n            if all(isinstance(nt, BaseTransformer) for nt in next_node):\n                return _merge_diverging(current, *next_node)\n            unsupported_elem = [elem for elem in next_node if not isinstance(elem, BaseTransformer)]\n            raise UnsupportedTransformerArgException(unsupported_elem[0])\n        else:\n            raise UnsupportedTransformerArgException(next_node)\n    else:\n        raise UnsupportedTransformerArgException(current)\n